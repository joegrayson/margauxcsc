{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, UPDATE_PROFILE_REQUEST, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, CLEAR_ERRORS } from '../constants/userConstants'; // Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Register User\n\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update profile\n\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Update password\n\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Logout User\n\nexport const logout = () => async dispatch => {\n  try {\n    await axios.get('api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; // Clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axios","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","UPDATE_PROFILE_REQUEST","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","CLEAR_ERRORS","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","get","updateProfile","put","success","updatePassword","passwords","logout","clearErrors"],"sources":["C:/Users/kingj/Desktop/margauxcsc/frontend/src/actions/userActions.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS,\r\n    REGISTER_USER_FAIL,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOAD_USER_FAIL,\r\n    UPDATE_PROFILE_REQUEST,\r\n    UPDATE_PROFILE_SUCCESS,\r\n    UPDATE_PROFILE_FAIL,\r\n    UPDATE_PASSWORD_REQUEST,\r\n    UPDATE_PASSWORD_SUCCESS,\r\n    UPDATE_PASSWORD_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    CLEAR_ERRORS\r\n} from '../constants/userConstants'\r\n\r\n// Login\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOGIN_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/v1/login', { email, password }, config)\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Register User\r\nexport const register = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: REGISTER_USER_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/v1/register', userData , config)\r\n\r\n        dispatch({\r\n            type: REGISTER_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: REGISTER_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOAD_USER_REQUEST })\r\n\r\n        const { data } = await axios.get('/api/v1/me')\r\n\r\n        dispatch({\r\n            type: LOAD_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOAD_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Update profile\r\nexport const updateProfile = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_PROFILE_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put('/api/v1/me/update', userData , config)\r\n\r\n        dispatch({\r\n            type: UPDATE_PROFILE_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_PROFILE_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Update password\r\nexport const updatePassword = (passwords) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_PASSWORD_REQUEST })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put('/api/v1/password/update', passwords , config)\r\n\r\n        dispatch({\r\n            type: UPDATE_PASSWORD_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_PASSWORD_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Logout User\r\nexport const logout = () => async (dispatch) => {\r\n    try {       \r\n        await axios.get('api/v1/logout')\r\n\r\n        dispatch({\r\n            type: LOGOUT_SUCCESS,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGOUT_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Clear Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    })\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}