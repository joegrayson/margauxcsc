{"ast":null,"code":"module.exports = Paginator; // Paginator constructor\n//\n// `per_page` is the number of results per page, `length` is the number of\n// pages to display. They default to `25` and `10` respectively.\n\nfunction Paginator(per_page, length) {\n  // You really should be calling this with `new Paginator`, but WHATEVER.\n  if (!(this instanceof Paginator)) {\n    return new Paginator(per_page, length);\n  } // Woo, defaults!\n\n\n  this.per_page = per_page || 25;\n  this.length = length || 10;\n} // Build an object with all the necessary information for outputting pagination\n// controls.\n//\n// (new Paginator(paginator.build(100, 2)\n\n\nPaginator.prototype.build = function (total_results, current_page) {\n  // We want the number of pages, rounded up to the nearest page.\n  var total_pages = Math.ceil(total_results / this.per_page); // Ensure both total_results and current_page are treated as Numbers\n\n  total_results = parseInt(total_results, 10);\n  current_page = parseInt(current_page, 10) || 1; // Obviously we can't be on a negative or 0 page.\n\n  if (current_page < 1) {\n    current_page = 1;\n  } // If the user has done something like /page/99999 we want to clamp that back\n  // down.\n\n\n  if (current_page > total_pages) {\n    current_page = total_pages;\n  } // This is the first page to be displayed as a numbered link.\n\n\n  var first_page = Math.max(1, current_page - Math.floor(this.length / 2)); // And here's the last page to be displayed specifically.\n\n  var last_page = Math.min(total_pages, current_page + Math.floor(this.length / 2)); // This is triggered if we're at or near one of the extremes; we won't have\n  // enough page links. We need to adjust our bounds accordingly.\n\n  if (last_page - first_page + 1 < this.length) {\n    if (current_page < total_pages / 2) {\n      last_page = Math.min(total_pages, last_page + (this.length - (last_page - first_page)));\n    } else {\n      first_page = Math.max(1, first_page - (this.length - (last_page - first_page)));\n    }\n  } // This can be triggered if the user wants an odd number of pages.\n\n\n  if (last_page - first_page + 1 > this.length) {\n    // We want to move towards whatever extreme we're closest to at the time.\n    if (current_page > total_pages / 2) {\n      first_page++;\n    } else {\n      last_page--;\n    }\n  } // First result on the page. This, along with the field below, can be used to\n  // do \"showing x to y of z results\" style things.\n\n\n  var first_result = this.per_page * (current_page - 1);\n\n  if (first_result < 0) {\n    first_result = 0;\n  } // Last result on the page.\n\n\n  var last_result = this.per_page * current_page - 1;\n\n  if (last_result < 0) {\n    last_result = 0;\n  }\n\n  if (last_result > Math.max(total_results - 1, 0)) {\n    last_result = Math.max(total_results - 1, 0);\n  } // GIMME THAT OBJECT\n\n\n  return {\n    total_pages: total_pages,\n    pages: Math.min(last_page - first_page + 1, total_pages),\n    current_page: current_page,\n    first_page: first_page,\n    last_page: last_page,\n    previous_page: current_page - 1,\n    next_page: current_page + 1,\n    has_previous_page: current_page > 1,\n    has_next_page: current_page < total_pages,\n    total_results: total_results,\n    results: Math.min(last_result - first_result + 1, total_results),\n    first_result: first_result,\n    last_result: last_result\n  };\n};","map":{"version":3,"names":["module","exports","Paginator","per_page","length","prototype","build","total_results","current_page","total_pages","Math","ceil","parseInt","first_page","max","floor","last_page","min","first_result","last_result","pages","previous_page","next_page","has_previous_page","has_next_page","results"],"sources":["C:/Users/kingj/Desktop/margauxcsc/frontend/node_modules/paginator/index.js"],"sourcesContent":["module.exports = Paginator;\n\n// Paginator constructor\n//\n// `per_page` is the number of results per page, `length` is the number of\n// pages to display. They default to `25` and `10` respectively.\nfunction Paginator(per_page, length) {\n  // You really should be calling this with `new Paginator`, but WHATEVER.\n  if (!(this instanceof Paginator)) {\n    return new Paginator(per_page, length);\n  }\n\n  // Woo, defaults!\n  this.per_page = per_page || 25;\n  this.length = length || 10;\n}\n\n// Build an object with all the necessary information for outputting pagination\n// controls.\n//\n// (new Paginator(paginator.build(100, 2)\nPaginator.prototype.build = function(total_results, current_page) {\n  // We want the number of pages, rounded up to the nearest page.\n  var total_pages = Math.ceil(total_results / this.per_page);\n\n  // Ensure both total_results and current_page are treated as Numbers\n  total_results = parseInt(total_results, 10);\n  current_page  = parseInt(current_page, 10) || 1;\n\n  // Obviously we can't be on a negative or 0 page.\n  if (current_page < 1) { current_page = 1; }\n  // If the user has done something like /page/99999 we want to clamp that back\n  // down.\n  if (current_page > total_pages) { current_page = total_pages; }\n\n  // This is the first page to be displayed as a numbered link.\n  var first_page = Math.max(1, current_page - Math.floor(this.length / 2));\n\n  // And here's the last page to be displayed specifically.\n  var last_page = Math.min(total_pages, current_page + Math.floor(this.length / 2));\n\n  // This is triggered if we're at or near one of the extremes; we won't have\n  // enough page links. We need to adjust our bounds accordingly.\n  if (last_page - first_page + 1 < this.length) {\n    if (current_page < (total_pages / 2)) {\n      last_page = Math.min(total_pages, last_page + (this.length - (last_page - first_page)));\n    } else {\n      first_page = Math.max(1, first_page - (this.length - (last_page - first_page)));\n    }\n  }\n\n  // This can be triggered if the user wants an odd number of pages.\n  if (last_page - first_page + 1 > this.length) {\n    // We want to move towards whatever extreme we're closest to at the time.\n    if (current_page > (total_pages / 2)) {\n      first_page++;\n    } else {\n      last_page--;\n    }\n  }\n\n  // First result on the page. This, along with the field below, can be used to\n  // do \"showing x to y of z results\" style things.\n  var first_result = this.per_page * (current_page - 1);\n  if (first_result < 0) { first_result = 0; }\n\n  // Last result on the page.\n  var last_result = (this.per_page * current_page) - 1;\n  if (last_result < 0) { last_result = 0; }\n  if (last_result > Math.max(total_results - 1, 0)) { last_result = Math.max(total_results - 1, 0); }\n\n  // GIMME THAT OBJECT\n  return {\n    total_pages: total_pages,\n    pages: Math.min(last_page - first_page + 1, total_pages),\n    current_page: current_page,\n    first_page: first_page,\n    last_page: last_page,\n    previous_page: current_page - 1,\n    next_page: current_page + 1,\n    has_previous_page: current_page > 1,\n    has_next_page: current_page < total_pages,\n    total_results: total_results,\n    results: Math.min(last_result - first_result + 1, total_results),\n    first_result: first_result,\n    last_result: last_result,\n  };\n};\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,SAAjB,C,CAEA;AACA;AACA;AACA;;AACA,SAASA,SAAT,CAAmBC,QAAnB,EAA6BC,MAA7B,EAAqC;EACnC;EACA,IAAI,EAAE,gBAAgBF,SAAlB,CAAJ,EAAkC;IAChC,OAAO,IAAIA,SAAJ,CAAcC,QAAd,EAAwBC,MAAxB,CAAP;EACD,CAJkC,CAMnC;;;EACA,KAAKD,QAAL,GAAgBA,QAAQ,IAAI,EAA5B;EACA,KAAKC,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACD,C,CAED;AACA;AACA;AACA;;;AACAF,SAAS,CAACG,SAAV,CAAoBC,KAApB,GAA4B,UAASC,aAAT,EAAwBC,YAAxB,EAAsC;EAChE;EACA,IAAIC,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUJ,aAAa,GAAG,KAAKJ,QAA/B,CAAlB,CAFgE,CAIhE;;EACAI,aAAa,GAAGK,QAAQ,CAACL,aAAD,EAAgB,EAAhB,CAAxB;EACAC,YAAY,GAAII,QAAQ,CAACJ,YAAD,EAAe,EAAf,CAAR,IAA8B,CAA9C,CANgE,CAQhE;;EACA,IAAIA,YAAY,GAAG,CAAnB,EAAsB;IAAEA,YAAY,GAAG,CAAf;EAAmB,CATqB,CAUhE;EACA;;;EACA,IAAIA,YAAY,GAAGC,WAAnB,EAAgC;IAAED,YAAY,GAAGC,WAAf;EAA6B,CAZC,CAchE;;;EACA,IAAII,UAAU,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYN,YAAY,GAAGE,IAAI,CAACK,KAAL,CAAW,KAAKX,MAAL,GAAc,CAAzB,CAA3B,CAAjB,CAfgE,CAiBhE;;EACA,IAAIY,SAAS,GAAGN,IAAI,CAACO,GAAL,CAASR,WAAT,EAAsBD,YAAY,GAAGE,IAAI,CAACK,KAAL,CAAW,KAAKX,MAAL,GAAc,CAAzB,CAArC,CAAhB,CAlBgE,CAoBhE;EACA;;EACA,IAAIY,SAAS,GAAGH,UAAZ,GAAyB,CAAzB,GAA6B,KAAKT,MAAtC,EAA8C;IAC5C,IAAII,YAAY,GAAIC,WAAW,GAAG,CAAlC,EAAsC;MACpCO,SAAS,GAAGN,IAAI,CAACO,GAAL,CAASR,WAAT,EAAsBO,SAAS,IAAI,KAAKZ,MAAL,IAAeY,SAAS,GAAGH,UAA3B,CAAJ,CAA/B,CAAZ;IACD,CAFD,MAEO;MACLA,UAAU,GAAGH,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYD,UAAU,IAAI,KAAKT,MAAL,IAAeY,SAAS,GAAGH,UAA3B,CAAJ,CAAtB,CAAb;IACD;EACF,CA5B+D,CA8BhE;;;EACA,IAAIG,SAAS,GAAGH,UAAZ,GAAyB,CAAzB,GAA6B,KAAKT,MAAtC,EAA8C;IAC5C;IACA,IAAII,YAAY,GAAIC,WAAW,GAAG,CAAlC,EAAsC;MACpCI,UAAU;IACX,CAFD,MAEO;MACLG,SAAS;IACV;EACF,CAtC+D,CAwChE;EACA;;;EACA,IAAIE,YAAY,GAAG,KAAKf,QAAL,IAAiBK,YAAY,GAAG,CAAhC,CAAnB;;EACA,IAAIU,YAAY,GAAG,CAAnB,EAAsB;IAAEA,YAAY,GAAG,CAAf;EAAmB,CA3CqB,CA6ChE;;;EACA,IAAIC,WAAW,GAAI,KAAKhB,QAAL,GAAgBK,YAAjB,GAAiC,CAAnD;;EACA,IAAIW,WAAW,GAAG,CAAlB,EAAqB;IAAEA,WAAW,GAAG,CAAd;EAAkB;;EACzC,IAAIA,WAAW,GAAGT,IAAI,CAACI,GAAL,CAASP,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAlB,EAAkD;IAAEY,WAAW,GAAGT,IAAI,CAACI,GAAL,CAASP,aAAa,GAAG,CAAzB,EAA4B,CAA5B,CAAd;EAA+C,CAhDnC,CAkDhE;;;EACA,OAAO;IACLE,WAAW,EAAEA,WADR;IAELW,KAAK,EAAEV,IAAI,CAACO,GAAL,CAASD,SAAS,GAAGH,UAAZ,GAAyB,CAAlC,EAAqCJ,WAArC,CAFF;IAGLD,YAAY,EAAEA,YAHT;IAILK,UAAU,EAAEA,UAJP;IAKLG,SAAS,EAAEA,SALN;IAMLK,aAAa,EAAEb,YAAY,GAAG,CANzB;IAOLc,SAAS,EAAEd,YAAY,GAAG,CAPrB;IAQLe,iBAAiB,EAAEf,YAAY,GAAG,CAR7B;IASLgB,aAAa,EAAEhB,YAAY,GAAGC,WATzB;IAULF,aAAa,EAAEA,aAVV;IAWLkB,OAAO,EAAEf,IAAI,CAACO,GAAL,CAASE,WAAW,GAAGD,YAAd,GAA6B,CAAtC,EAAyCX,aAAzC,CAXJ;IAYLW,YAAY,EAAEA,YAZT;IAaLC,WAAW,EAAEA;EAbR,CAAP;AAeD,CAlED"},"metadata":{},"sourceType":"script"}